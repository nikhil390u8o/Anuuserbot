import asyncio
from telethon import errors

async def sm_handle(client, event):
    # try to delete the command message (force)
    try:
        await client.delete_messages(event.chat_id, [event.message.id])
    except Exception as e:
        print(f"‚ö†Ô∏è Could not delete .sm command: {e}")

    messages = [
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä …¥·¥Ä ú…™",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä …¥·¥Ä ú…™ ·¥õ·¥è",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä …¥·¥Ä ú…™ ·¥õ·¥è  è·¥Ä ú…™",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä …¥·¥Ä ú…™ ·¥õ·¥è  è·¥Ä ú…™ ·¥ò·¥á",
        " ô·¥Ä ô·¥ú ·¥Ö ú·¥á Ä ·¥ç·¥Ä·¥õ  ô·¥è ü…¥·¥Ä …¥·¥Ä ú…™ ·¥õ·¥è  è·¥Ä ú…™ ·¥ò·¥á ·¥ò·¥Ä ü·¥á ·¥Ö·¥á…¥…¢·¥á üíÄ",
        (
            "“ì·¥ú·¥ç·¥ã·¥á·¥Ö  ô è\n"
            ".                       /¬Ø )\n"
            "                      /¬Ø  /\n"
            "                    /    /\n"
            "              /¬¥¬Ø/'   '/¬¥¬Ø¬Ø‚Ä¢¬∏\n"
            "          /'/   /    /       /¬®¬Ø\\ \n"
            "        ('(   (   (   (  ¬Ø~/'  ')\n"
            "         \\                        /\n"
            "          \\                _.‚Ä¢¬¥\n"
            "            \\              (\n"
            "              \\--------------\n"
            "               ))))))))))))\n"
            "“ì·¥ú·¥ç·¥ã·¥á·¥Ö  ô è :- [ ùó¶ùó† ùóôùó®ùóñùóûùóòùó•ùó¶ ]\n"
            "ùó¢ùó™ùó°ùóòùó• @tyson_8076 [ùó¶ùó†]\n"
            "ùóïùó¢ùóß ùóóùóòùó© @ll_PANDA_BBY_ll [ùó¶ùó†]"
        )
    ]

    if not messages:
        return

    # send the first message (so we have a clean Message object to edit)
    try:
        msg_obj = await client.send_message(event.chat_id, messages[0])
    except Exception as e:
        print(f"‚ùå Failed to send initial message: {e}")
        return

    base_delay = 0.2  # safe default (0.7-1.0); increase if edits still stop

    # loop edits starting from the second element (0 already sent)
    for i in range(1, len(messages)):
        text = messages[i]
        try:
            await msg_obj.edit(text)
            print(f"‚úèÔ∏è Edited step {i}: {text[:30]}...")
        except errors.MessageNotModifiedError:
            # if the text is same as current, just continue
            print(f"‚ÑπÔ∏è Step {i} text not modified; skipping.")
        except errors.MessageIdInvalidError:
            # can't edit (maybe message lost) -> fallback to sending new message and continue
            print(f"‚ö†Ô∏è MessageIdInvalid at step {i}, sending new message as fallback.")
            try:
                msg_obj = await client.send_message(event.chat_id, text)
            except Exception as e:
                print(f"‚ùå Fallback send failed at step {i}: {e}")
                return
        except Exception as e:
            # other errors -> try to recover by sending a fresh message
            print(f"‚ö†Ô∏è Edit failed at step {i}: {e}. Attempting to send new message.")
            try:
                msg_obj = await client.send_message(event.chat_id, text)
            except Exception as ex:
                print(f"‚ùå Fallback send failed at step {i}: {ex}")
                return

        # longer pause before the final big ASCII art for readability
        if i == len(messages) - 1:
            await asyncio.sleep(0.2)
        else:
            await asyncio.sleep(base_delay)
